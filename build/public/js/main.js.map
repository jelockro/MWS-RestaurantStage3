{"version":3,"sources":["main.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","document","addEventListener","event","initMap","fetchNeighborhoods","fetchCuisines","DBHelper","error","neighborhoods","console","self","fillNeighborhoodsHTML","arguments","undefined","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","cuisines","fillCuisinesHTML","cuisine","newMap","L","map","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","restaurants","resetRestaurants","fillRestaurantsHTML","markers","marker","remove","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","image","className","imgurlbase","imageUrlForRestaurant","imgurl1x","split","imgurl2x","src","srcset","alt","name","address","more","href","urlForRestaurant","mapMarkerForRestaurant","on","window","location","options","url","push"],"mappings":"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\nvar restaurants = void 0,\n    neighborhoods = void 0,\n    cuisines = void 0;\nvar newMap;\nvar markers = [];\n\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\ndocument.addEventListener('DOMContentLoaded', function (event) {\n  initMap(); // added\n  fetchNeighborhoods();\n  fetchCuisines();\n});\n\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\nfetchNeighborhoods = function fetchNeighborhoods() {\n  DBHelper.fetchNeighborhoods(function (error, neighborhoods) {\n    if (error) {\n      // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\r\n * Set neighborhoods HTML.\r\n */\nfillNeighborhoodsHTML = function fillNeighborhoodsHTML() {\n  var neighborhoods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.neighborhoods;\n\n  var select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(function (neighborhood) {\n    var option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\nfetchCuisines = function fetchCuisines() {\n  DBHelper.fetchCuisines(function (error, cuisines) {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\r\n * Set cuisines HTML.\r\n */\nfillCuisinesHTML = function fillCuisinesHTML() {\n  var cuisines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.cuisines;\n\n  var select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(function (cuisine) {\n    var option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\ninitMap = function initMap() {\n  self.newMap = L.map('map', {\n    center: [40.722216, -73.987501],\n    zoom: 12,\n    scrollWheelZoom: false\n  });\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n    mapboxToken: 'pk.eyJ1IjoiamVsb2Nrcm8iLCJhIjoiY2ppZXoydmUxMGg5ZjNrb2Nuc3l0N2J0MSJ9.DVVsqyqurrIcRVgdKmGU-Q',\n    maxZoom: 18,\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' + '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' + 'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    id: 'mapbox.streets'\n  }).addTo(newMap);\n\n  updateRestaurants();\n};\n/* window.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n} */\n\n/**\r\n * Update page and map for current restaurants.\r\n */\nupdateRestaurants = function updateRestaurants() {\n  var cSelect = document.getElementById('cuisines-select');\n  var nSelect = document.getElementById('neighborhoods-select');\n\n  var cIndex = cSelect.selectedIndex;\n  var nIndex = nSelect.selectedIndex;\n\n  var cuisine = cSelect[cIndex].value;\n  var neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, function (error, restaurants) {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  });\n};\n\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\nresetRestaurants = function resetRestaurants(restaurants) {\n  // Remove all restaurants\n  self.restaurants = [];\n  var ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  if (self.markers) {\n    self.markers.forEach(function (marker) {\n      return marker.remove();\n    });\n  }\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\nfillRestaurantsHTML = function fillRestaurantsHTML() {\n  var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;\n\n  var ul = document.getElementById('restaurants-list');\n  restaurants.forEach(function (restaurant) {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n};\n\n/**\r\n * Create restaurant HTML.\r\n */\ncreateRestaurantHTML = function createRestaurantHTML(restaurant) {\n  var li = document.createElement('li');\n\n  var image = document.createElement('img');\n  image.className = 'restaurant-img';\n  var imgurlbase = DBHelper.imageUrlForRestaurant(restaurant, 'tiles');\n  //console.log(\"imgurlbase = \", imgurlbase);\n  var imgparts = imgurlbase.split('/');\n  //console.log(\"imgparts: \", imgparts);\n\n  var imgurl1x = imgurlbase + '-tile_1x.jpg';\n  var imgurl2x = imgurlbase + '-tile_2x.jpg';\n\n  image.src = imgurl1x;\n  image.srcset = imgurl1x + ' 300w, ' + imgurl2x + ' 600w';\n  image.alt = restaurant.name + ' restaurant promotional image';\n  li.append(image);\n\n  var name = document.createElement('h1');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  var neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  var address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  var more = document.createElement('a');\n  more.innerHTML = 'View Details Page';\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  li.append(more);\n\n  return li;\n};\n\n/**\r\n * Add markers for current restaurants to the map.\r\n */\naddMarkersToMap = function addMarkersToMap() {\n  var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;\n\n  restaurants.forEach(function (restaurant) {\n    // Add marker to the map\n    var marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\n    marker.on(\"click\", onClick);\n    function onClick() {\n      window.location.href = marker.options.url;\n    }\n    self.markers.push(marker);\n  });\n};\n/* addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n} */\n\n},{}]},{},[1]);\n"]}